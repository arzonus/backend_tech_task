// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: application.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _application_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetApplicationByIdRequestRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetApplicationByIdRequestRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetApplicationByIdRequestRequestValidationError is the validation error
// returned by GetApplicationByIdRequestRequest.Validate if the designated
// constraints aren't met.
type GetApplicationByIdRequestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationByIdRequestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationByIdRequestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationByIdRequestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationByIdRequestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationByIdRequestRequestValidationError) ErrorName() string {
	return "GetApplicationByIdRequestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationByIdRequestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationByIdRequestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationByIdRequestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationByIdRequestRequestValidationError{}

// Validate checks the field values on GetApplicationsByFiltersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetApplicationsByFiltersRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	if v, ok := interface{}(m.GetCreatedAtTimerange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetApplicationsByFiltersRequestValidationError{
				field:  "CreatedAtTimerange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAtTimerange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetApplicationsByFiltersRequestValidationError{
				field:  "UpdatedAtTimerange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	return nil
}

// GetApplicationsByFiltersRequestValidationError is the validation error
// returned by GetApplicationsByFiltersRequest.Validate if the designated
// constraints aren't met.
type GetApplicationsByFiltersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationsByFiltersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationsByFiltersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationsByFiltersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationsByFiltersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationsByFiltersRequestValidationError) ErrorName() string {
	return "GetApplicationsByFiltersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationsByFiltersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationsByFiltersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationsByFiltersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationsByFiltersRequestValidationError{}

// Validate checks the field values on TimeRange with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TimeRange) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimeRangeValidationError{
				field:  "Start",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimeRangeValidationError{
				field:  "End",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TimeRangeValidationError is the validation error returned by
// TimeRange.Validate if the designated constraints aren't met.
type TimeRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeRangeValidationError) ErrorName() string { return "TimeRangeValidationError" }

// Error satisfies the builtin error interface
func (e TimeRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeRangeValidationError{}

// Validate checks the field values on GetApplicationsByFiltersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetApplicationsByFiltersResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetApplications() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetApplicationsByFiltersResponseValidationError{
					field:  fmt.Sprintf("Applications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetApplicationsByFiltersResponseValidationError is the validation error
// returned by GetApplicationsByFiltersResponse.Validate if the designated
// constraints aren't met.
type GetApplicationsByFiltersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationsByFiltersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationsByFiltersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationsByFiltersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationsByFiltersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationsByFiltersResponseValidationError) ErrorName() string {
	return "GetApplicationsByFiltersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationsByFiltersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationsByFiltersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationsByFiltersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationsByFiltersResponseValidationError{}

// Validate checks the field values on UpdateApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateApplicationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if _, ok := _UpdateApplicationRequest_Status_NotInLookup[m.GetStatus()]; ok {
		return UpdateApplicationRequestValidationError{
			field:  "Status",
			reason: "value must not be in list [0]",
		}
	}

	return nil
}

// UpdateApplicationRequestValidationError is the validation error returned by
// UpdateApplicationRequest.Validate if the designated constraints aren't met.
type UpdateApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApplicationRequestValidationError) ErrorName() string {
	return "UpdateApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApplicationRequestValidationError{}

var _UpdateApplicationRequest_Status_NotInLookup = map[Application_Status]struct{}{
	0: {},
}

// Validate checks the field values on CreateApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateApplicationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// CreateApplicationRequestValidationError is the validation error returned by
// CreateApplicationRequest.Validate if the designated constraints aren't met.
type CreateApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApplicationRequestValidationError) ErrorName() string {
	return "CreateApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApplicationRequestValidationError{}

// Validate checks the field values on GetApplicationByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetApplicationByIdRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetApplicationByIdRequestValidationError is the validation error returned by
// GetApplicationByIdRequest.Validate if the designated constraints aren't met.
type GetApplicationByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationByIdRequestValidationError) ErrorName() string {
	return "GetApplicationByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationByIdRequestValidationError{}

// Validate checks the field values on Application with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Application) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if _, ok := _Application_Status_NotInLookup[m.GetStatus()]; ok {
		return ApplicationValidationError{
			field:  "Status",
			reason: "value must not be in list [0]",
		}
	}

	// no validation rules for UserId

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _Application_ExternalStatus_NotInLookup[m.GetExternalStatus()]; ok {
		return ApplicationValidationError{
			field:  "ExternalStatus",
			reason: "value must not be in list [0]",
		}
	}

	return nil
}

// ApplicationValidationError is the validation error returned by
// Application.Validate if the designated constraints aren't met.
type ApplicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationValidationError) ErrorName() string { return "ApplicationValidationError" }

// Error satisfies the builtin error interface
func (e ApplicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationValidationError{}

var _Application_Status_NotInLookup = map[Application_Status]struct{}{
	0: {},
}

var _Application_ExternalStatus_NotInLookup = map[Application_ExternalStatus]struct{}{
	0: {},
}
